name: Deploy to EC2 via SSM

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # OIDC용
      contents: read
    steps:
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_OIDC_ROLE_NAME }}
          aws-region: ap-northeast-2

      - name: Trigger deploy script via SSM
        id: ssm
        run: |
          INSTANCE_ID="${{ secrets.AWS_INSTANCE_ID }}"    # 배포 대상 인스턴스
          CMD_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids "$INSTANCE_ID" \
            --comment "nuvia deploy $GITHUB_SHA" \
            --parameters commands='["sudo /home/ubuntu/scripts/nuvia-deploy.sh"]' \
            --query "Command.CommandId" \
            --output text)
          echo "command_id=$CMD_ID" >> "$GITHUB_OUTPUT"
          echo "SSM Command ID: $CMD_ID"

      - name: Wait for SSM command to finish
        run: |
          INSTANCE_ID="${{ secrets.AWS_INSTANCE_ID }}"
          CMD_ID="${{ steps.ssm.outputs.command_id }}"
          for i in {1..60}; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$CMD_ID" \
              --instance-id "$INSTANCE_ID" \
              --query "Status" \
              --output text || true)
            echo "Current status: $STATUS"
            if [ "$STATUS" = "Success" ]; then
              exit 0
            elif [[ "$STATUS" =~ ^(Failed|Cancelled|TimedOut)$ ]]; then
              aws ssm get-command-invocation \
                --command-id "$CMD_ID" \
                --instance-id "$INSTANCE_ID" \
                --output text
              exit 1
            fi
            sleep 5
          done
          echo "Timed out waiting for SSM command"
          exit 1
